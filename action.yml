name: 'Poetry Update'
description: 'Runs `poetry update`, checks for newer dependencies. Creates a pull request if any updates are available.'
author: 'Fuzzy Labs'
branding:
  icon: "chevrons-up"
  color: "purple"
inputs:
  python-version:
    description: "The python version to use with poetry"
    default: '3.10.12'
  poetry-version:
    description: "The poetry version to use"
    default: '1.8.2'
  directory:
    description: "The directory of the project files"
    default: '.'

runs:
  using: "composite"
  steps:
    #----------------------------------------------
    #  Check minimum python & poetry version
    #----------------------------------------------
    # 3.10.5 is the min version support for ubuntu 22.04 (latest)
    # Poetry 1.2 is the first release that support python >=3.8
    - name: Check compatible version
      run: |
        min_python_version="3.10"
        min_poetry_version="1.2"
        if [ "$(printf '%s\n' "$min_python_version" "${{ inputs.python-version }}" | sort -V | head -n1)" != "$min_python_version" ]; then
          echo "Less than the minimum required python version: ${min_python_version}, exiting workflow"
          echo "RUN_UPDATE=false" >> $GITHUB_ENV
          exit 0
        fi

        if [ "$(printf '%s\n' "$min_poetry_version" "${{ inputs.poetry-version }}" | sort -V | head -n1)" != "$min_poetry_version" ]; then
          echo "Less than the minimum required poetry version: ${min_poetry_version}, exiting workflow"
          echo "RUN_UPDATE=false" >> $GITHUB_ENV
          exit 0
        fi
      shell: bash

    #----------------------------------------------
    #  Check out the caller repo & Set up python
    #----------------------------------------------
    - name: Check out repository
      if: env.RUN_UPDATE != 'false'
      uses: actions/checkout@v4

    - name: Set up python
      if: env.RUN_UPDATE != 'false'
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}
        

    #----------------------------------------------
    #           Install & configure poetry
    #----------------------------------------------
    - name: Install Poetry
      if: env.RUN_UPDATE != 'false'
      uses: snok/install-poetry@v1
      with:
        version: ${{ inputs.poetry-version }}
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true


    #----------------------------------------------
    #         Check if poetry.lock exists
    #----------------------------------------------
    - name: Check if poetry.lock exists
      working-directory: ${{ inputs.directory }}
      if: env.RUN_UPDATE != 'false'
      run: |
        if [ -f "poetry.lock" ]; then
          poetry install
          echo "poetry.lock file found, running poetry update."
        else
          echo "poetry.lock file not found, skipping poetry update."
          echo "RUN_UPDATE=false" >> $GITHUB_ENV
        fi
      shell: bash

    #----------------------------------------------
    #                Run poetry update
    #----------------------------------------------
    - name: Run poetry update
      working-directory: ${{ inputs.directory }}
      if: env.RUN_UPDATE != 'false'
      run: |
        echo "updating poetry"
        poetry update
        echo "setting update message"
        UPDATE_MESSAGE=$(poetry update | grep -i 'updating' | grep -v 'Updating dependencies' | sed 's/Updating//g')
        echo $UPDATE_MESSAGE

        echo "UPDATE_MESSAGE=$UPDATE_MESSAGE" >> $GITHUB_ENV
      shell: bash

    #----------------------------------------------
    #              Create a pull request
    #----------------------------------------------
    - name: Create Pull Request
      if: env.RUN_UPDATE != 'false'
      uses: peter-evans/create-pull-request@v6
      with:
          token: ${{ github.token }}
          branch: update/poetry-update
          title: Update poetry dependencies
          commit-message: "Chore(deps): Upgrading `poetry` dependencies"
          body: |
            Update `poetry` dependencies to use latest compatible versions.

            **Outdated packages**:
                ${{ env.UPDATE_MESSAGE }}
